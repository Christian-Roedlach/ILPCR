es@xavier:~/cupoch$ cmake -LH -B build
CMake Deprecation Warning at CMakeLists.txt:1 (cmake_minimum_required):
  Compatibility with CMake < 3.5 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


-- cupoch 0.2.11.0
-- Compiling on Unix
CMake Warning (dev) at CMakeLists.txt:162 (find_package):
  Policy CMP0146 is not set: The FindCUDA module is removed.  Run "cmake
  --help-policy CMP0146" for policy details.  Use the cmake_policy command to
  set the policy and suppress this warning.

This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Warning (dev) at /usr/share/cmake-3.29/Modules/FindOpenGL.cmake:415 (message):
  Policy CMP0072 is not set: FindOpenGL prefers GLVND by default when
  available.  Run "cmake --help-policy CMP0072" for policy details.  Use the
  cmake_policy command to set the policy and suppress this warning.

  FindOpenGL found both a legacy GL library:

    OPENGL_gl_LIBRARY: /usr/lib/aarch64-linux-gnu/libGL.so

  and GLVND libraries for OpenGL and GLX:

    OPENGL_opengl_LIBRARY: /usr/lib/aarch64-linux-gnu/libOpenGL.so
    OPENGL_glx_LIBRARY: /usr/lib/aarch64-linux-gnu/libGLX.so

  OpenGL_GL_PREFERENCE has not been set to "GLVND" or "LEGACY", so for
  compatibility with CMake 3.10 and below the legacy GL library will be used.
Call Stack (most recent call first):
  third_party/CMakeLists.txt:3 (find_package)
This warning is for project developers.  Use -Wno-dev to suppress it.

CMake Deprecation Warning at third_party/pybind11/CMakeLists.txt:8 (cmake_minimum_required):
  Compatibility with CMake < 3.5 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


-- pybind11 v2.10.0 
CMake Warning (dev) at third_party/pybind11/tools/FindPythonLibsNew.cmake:98 (find_package):
  Policy CMP0148 is not set: The FindPythonInterp and FindPythonLibs modules
  are removed.  Run "cmake --help-policy CMP0148" for policy details.  Use
  the cmake_policy command to set the policy and suppress this warning.

Call Stack (most recent call first):
  third_party/pybind11/tools/pybind11Tools.cmake:50 (find_package)
  third_party/pybind11/tools/pybind11Common.cmake:180 (include)
  third_party/pybind11/CMakeLists.txt:200 (include)
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Building googletest from source
-- Building GLEW from source (BUILD_GLEW=ON)
CMake Deprecation Warning at third_party/glew/CMakeLists.txt:3 (cmake_minimum_required):
  Compatibility with CMake < 3.5 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


-- Building GLFW from source (BUILD_GLFW=ON)
CMake Deprecation Warning at third_party/GLFW/CMakeLists.txt:3 (cmake_minimum_required):
  Compatibility with CMake < 3.5 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


-- Using X11 for window creation
-- Build spdlog: 1.8.5
-- Build type: Release
-- Building JSONCPP from source (BUILD_JSONCPP=ON)
CMake Deprecation Warning at third_party/jsoncpp/CMakeLists.txt:3 (cmake_minimum_required):
  Compatibility with CMake < 3.5 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


-- Building LIBPNG from source (BUILD_PNG=ON)
CMake Deprecation Warning at third_party/zlib/CMakeLists.txt:3 (cmake_minimum_required):
  Compatibility with CMake < 3.5 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


CMake Deprecation Warning at third_party/libpng/CMakeLists.txt:5 (cmake_minimum_required):
  Compatibility with CMake < 3.5 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


-- Building libjpeg-turbo from source (BUILD_JPEG=ON)
-- Building libjpeg-turbo from source
-- NASM assembler enabled
-- Could NOT find Doxygen (missing: DOXYGEN_EXECUTABLE) (Required is at least version "1.9.1")
-- 
-- ************************ stdgpu Configuration Summary *************************
-- 
-- General:
--   Version                                   :   1.3.0
--   System                                    :   Linux
--   Build type                                :   Release
-- 
-- Build:
--   STDGPU_BACKEND                            :   STDGPU_BACKEND_CUDA
--   STDGPU_BUILD_SHARED_LIBS                  :   OFF
--   STDGPU_SETUP_COMPILER_FLAGS               :   OFF
--   STDGPU_TREAT_WARNINGS_AS_ERRORS           :   OFF
--   STDGPU_ANALYZE_WITH_CLANG_TIDY            :   OFF
--   STDGPU_ANALYZE_WITH_CPPCHECK              :   OFF
-- 
-- Configuration:
--   STDGPU_ENABLE_CONTRACT_CHECKS             :   OFF
--   STDGPU_USE_32_BIT_INDEX                   :   ON
-- 
-- Examples:
--   STDGPU_BUILD_EXAMPLES                     :   OFF
-- 
-- Tests:
--   STDGPU_BUILD_TESTS                        :   OFF
--   STDGPU_BUILD_TEST_COVERAGE                :   OFF
-- 
-- Documentation:
--   Doxygen                                   :   NO
-- 
-- *******************************************************************************
-- 
-- Building tinyobjloader from source
CMake Deprecation Warning at src/tests/CMakeLists.txt:1 (cmake_minimum_required):
  Compatibility with CMake < 3.5 will be removed from a future version of
  CMake.

  Update the VERSION argument <min> value or use a ...<max> suffix to tell
  CMake that the project does not need compatibility with older versions.


-- PYPI_PACKAGE_NAME: cupoch
-- Configuring done (7.1s)
-- Generating done (1.8s)
-- Build files have been written to: /home/es/cupoch/build
-- Cache values
// Use the Eigen3 that comes with Cupoch
BUILD_EIGEN3:BOOL=ON

// Build glew from source
BUILD_GLEW:BOOL=ON

// Build glfw from source
BUILD_GLFW:BOOL=ON

// Build jpeg-turbo from source
BUILD_JPEG:BOOL=ON

// Build json from source
BUILD_JSONCPP:BOOL=ON

// Build png from source
BUILD_PNG:BOOL=ON

// Build pybind11 from source
BUILD_PYBIND11:BOOL=ON

// Build the python module
BUILD_PYTHON_MODULE:BOOL=ON

// Build the Cupoch unit tests
BUILD_UNIT_TESTS:BOOL=ON

// Choose Release or Debug
CMAKE_BUILD_TYPE:STRING=Release

// CUDA architectures
CMAKE_CUDA_ARCHITECTURES:STRING=52

// Install path prefix, prepended onto install directories.
CMAKE_INSTALL_PREFIX:PATH=/usr/local

// If true, cmake will use relative paths
CMAKE_USE_RELATIVE_PATHS:BOOL=ON

// Host side compiler used by NVCC
CUDA_HOST_COMPILER:FILEPATH=/usr/bin/cc

// Path to a file.
CUDA_SDK_ROOT_DIR:PATH=CUDA_SDK_ROOT_DIR-NOTFOUND

// Toolkit location.
CUDA_TOOLKIT_ROOT_DIR:PATH=/usr/local/cuda

// Use the static version of the CUDA runtime library if available
CUDA_USE_STATIC_CUDA_RUNTIME:BOOL=ON

// Use Mir for window creation
GLFW_USE_MIR:BOOL=OFF

// Use Wayland for window creation
GLFW_USE_WAYLAND:BOOL=OFF

// Use the Vulkan loader statically linked into application
GLFW_VULKAN_STATIC:BOOL=OFF

// Installation directory for CMake files
INSTALL_CMAKE_DIR:PATH=lib/cmake/cupoch

// Takes an empty string or 64. Directory where lib will be installed: lib or lib64
LIB_SUFFIX:STRING=

// Path to a library.
M_LIBRARY:FILEPATH=/usr/lib/aarch64-linux-gnu/libm.so

// Enable ARM NEON optimizations:
     check: (default) use internal checking code;
     off: disable the optimizations;
     on: turn on unconditionally.
PNG_ARM_NEON:STRING=check

// Enable Hardware Optimizations
PNG_HARDWARE_OPTIMIZATIONS:BOOL=ON

// Force new FindPython
PYBIND11_FINDPYTHON:BOOL=OFF

// Install pybind11 header files?
PYBIND11_INSTALL:BOOL=OFF

// Override the ABI version, may be used to enable the unstable ABI.
PYBIND11_INTERNALS_VERSION:STRING=

// Disable search for Python
PYBIND11_NOPYTHON:BOOL=OFF

// Python version to use for compiling modules
PYBIND11_PYTHON_VERSION:STRING=

// Build pybind11 test suite?
PYBIND11_TEST:BOOL=OFF

// Build all artifacts
SPDLOG_BUILD_ALL:BOOL=OFF

// Build benchmarks (Requires https://github.com/google/benchmark.git to be installed)
SPDLOG_BUILD_BENCH:BOOL=OFF

// Build example
SPDLOG_BUILD_EXAMPLE:BOOL=OFF

// Build header only example
SPDLOG_BUILD_EXAMPLE_HO:BOOL=OFF

// Build shared library
SPDLOG_BUILD_SHARED:BOOL=OFF

// Build tests
SPDLOG_BUILD_TESTS:BOOL=OFF

// Build tests using the header only version
SPDLOG_BUILD_TESTS_HO:BOOL=OFF

// Enable compiler warnings
SPDLOG_BUILD_WARNINGS:BOOL=OFF

// Use the much faster (but much less accurate) CLOCK_REALTIME_COARSE instead of the regular clock,
SPDLOG_CLOCK_COARSE:BOOL=OFF

// Disable default logger creation
SPDLOG_DISABLE_DEFAULT_LOGGER:BOOL=OFF

// Build static or shared library using precompiled header to speed up compilation time
SPDLOG_ENABLE_PCH:BOOL=OFF

// Use external fmt library instead of bundled
SPDLOG_FMT_EXTERNAL:BOOL=OFF

// Use external fmt header-only library instead of bundled
SPDLOG_FMT_EXTERNAL_HO:BOOL=OFF

// Generate the install target
SPDLOG_INSTALL:BOOL=OFF

// prevent spdlog from using of std::atomic log levels (use only if your code never modifies log levels concurrently
SPDLOG_NO_ATOMIC_LEVELS:BOOL=OFF

// Compile with -fno-exceptions. Call abort() on any spdlog exceptions
SPDLOG_NO_EXCEPTIONS:BOOL=OFF

// prevent spdlog from querying the thread id on each log call if thread id is not needed
SPDLOG_NO_THREAD_ID:BOOL=OFF

// prevent spdlog from using thread local storage
SPDLOG_NO_TLS:BOOL=OFF

// Prevent from child processes to inherit log file descriptors
SPDLOG_PREVENT_CHILD_FD:BOOL=OFF

// Enable address sanitizer in tests
SPDLOG_SANITIZE_ADDRESS:BOOL=OFF

// run clang-tidy
SPDLOG_TIDY:BOOL=OFF

// Use static (MT/MTd) Windows runtime
STATIC_WINDOWS_RUNTIME:BOOL=OFF

// Analyzes the code with clang-tidy, default: OFF
STDGPU_ANALYZE_WITH_CLANG_TIDY:BOOL=OFF

// Analyzes the code with cppcheck, default: OFF
STDGPU_ANALYZE_WITH_CPPCHECK:BOOL=OFF

// Device system backend, default: STDGPU_BACKEND_CUDA
STDGPU_BACKEND:STRING=STDGPU_BACKEND_CUDA

// Builds the project as a shared library, if set to ON, or as a static library, if set to OFF, default: BUILD_SHARED_LIBS
STDGPU_BUILD_SHARED_LIBS:BOOL=OFF

// Build a test coverage report, default: OFF
STDGPU_BUILD_TEST_COVERAGE:BOOL=OFF

// Enable contract checks, default: OFF if CMAKE_BUILD_TYPE is Release or MinSizeRel, ON otherwise
STDGPU_ENABLE_CONTRACT_CHECKS:BOOL=OFF

// Treats compiler warnings as errors, default: OFF
STDGPU_TREAT_WARNINGS_AS_ERRORS:BOOL=OFF

// Use 32-bit instead of 64-bit signed integer for index_t, default: ON
STDGPU_USE_32_BIT_INDEX:BOOL=ON

// Use rmm library(fast memory allocator)
USE_RMM:BOOL=ON

// 
WITH_SIMD:BOOL=ON

// Path to a file.
X11_xcb_xkb_INCLUDE_PATH:PATH=/usr/include

// The directory containing a CMake configuration file for pybind11.
pybind11_DIR:PATH=pybind11_DIR-NOTFOUND
